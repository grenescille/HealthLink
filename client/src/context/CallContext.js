import React, { createContext, useEffect, useRef, useState } from "react";
import {io} from 'socket.io-client'
import Peer from 'simple-peer'

const CallContext = createContext();

const socket = io('http://localhost:6000/call');

//context will be available to all children who can have rights of access to calling data

const ContextProvider = ({children}) => {

    const [stream, setStream] = useState(null);
    const [me, setMe] = useState('');
    const [call, setCall] = useState({});
    const [callAccepted, setCallAccepted] = useState(false);
    const [callEnded, setCallEnded] = useState(false);
    const [name, setName] = useState('');

    const myVideo = useRef({}); //is a html video element with my video
    const userVideo = useRef({}); //is a html video element with my video
    const connectionRef = useRef({});

    //context is created so that children components at any point can access to state and inner methods

    useEffect(() => {
        navigator.mediaDevices.getUserMedia({
            video: true,
            audio:true
        })
        .then((incomingStream) => {
            setStream(incomingStream);
            myVideo.current.srcObject = incomingStream;
        });

        //saves my socket.id (created by the signalling server). listening since beginning
        socket.on('ownuser', (id) => {setMe(id)});

        //this particular event is received by the user that is receiving the call (callee) (with the data from the user trying to establish connection forwarded by the signalling server)
        //event 'call' originated from the signalling server
        socket.on('call',({from,name:callerName,signal}) => {
            setCall({
                //this event will be sensed by the receiver
                isReceivedCall: true,
                //caller socket.id 
                from,
                //caller name 
                name: callerName,
                //signal generated by the new Peer() 
                signal
            });
        })
    }, [])

    //when we want try a call, we need to have the callee id (id)
    const callUser = (id) => {
        //when Peer() is instantiated (regardless the fact we are or not the initiator, and event 'signal' (which basically is encapsulating webrtc offers/answers and ICE candidates.. rough process difficult to bear which simple-peer helps us to abstract from))
        const callerPeer = new Peer({
            initiator: true,
            trickle: false,
            stream: stream //my stream i need to pass to the callee
        });

        //will capture the signal originated above and emit it to the other user through the signalling server
        callerPeer.on('signal', (data) => {
            //here is where all starts
            socket.emit('call', {destinationUser: id, signallingData: data, from:me,name: name});
        });

        //when communication is established and a stream from the callee is received, we need to show it on the correct video tag
        callerPeer.on('stream', (streamFromCallee) => {
            userVideo.current.srcObject = streamFromCallee;
        });

        //as a caller, we expect to receive an answer, when positive answer comes, then we will try to establish a connection
        callerPeer.on('callaccepted',(signal) => {
            setCallAccepted(true); //for conditional rendering.. if accepted than we will show callee window
            callerPeer.signal(signal); //final handshaking is done here. Trying p2p connection
        });

        connectionRef.current = callerPeer;
    };

    const answerCall = () => {

        const calleePeer = new Peer({
            initiator: false,
            trickle: false,
            stream: stream //my stream i need to pass to the callee
        });

        calleePeer.on('signal', (data) => {
            //here is where the answer starts (signalling process.. only after caller receive the signalling data from callee, will attempt to establish p2p connection)
            socket.emit('answer', {signaldata: data, callerId: call.from});
        });

        calleePeer.on('stream', (streamFromCaller) => {
            //the other user video, from the point of view of the callee (who is answering the call, is the userVideo and not myVideo)
            userVideo.current.srcObject = streamFromCaller;
        });

        //callee attempts to establish p2p connection with caller.. only will be achieved after caller received the signalling data sent on line 92 via websockets
        calleePeer.signal(call.signal);

        connectionRef.current = calleePeer;
    }

    const endCall = () => {
        setCallEnded(true);

        connectionRef.current.destroy();

        //reloads the page and a new socket.id is generated and handover to the client in the useEffect() (which will be re-runned). This is done due to some issues when we want to start immediatly a new call with same socket
        window.location.reload();
    }

}